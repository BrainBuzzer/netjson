<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.draft-bortzmeyer-dnsop-dns-privacy SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-bortzmeyer-dnsop-dns-privacy">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-kaplan-capoano-gaia-netjson-00" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <title abbrev="NetJSON">NetJSON: data interchange format for networks</title>
        <author fullname="Federico Capoano" initials="F.C."
            surname="Capoano">
            <organization>Ninux.org</organization>
            <address>
                <postal>
                    <street>Via Silvio Pellico 29</street>
                    <city>Pomezia</city>
                    <region>Rome</region>
                    <code>00071</code>
                    <country>Italy</country>
                </postal>
                <phone>+39 366 4253802</phone>
                <email>nemesis@ninux.org</email>
                <uri>http://www.ninux.org/</uri>
            </address>
        </author>
        <author fullname="L. Aaron Kaplan" initials="A."
            surname="Kaplan">
            <organization>Funkfeuer.at</organization>
            <address>
                <postal>
                    <street>Schwarzhorngasse 9/5</street>
                    <city>Vienna</city>
                    <region></region>
                    <code>A-1050</code>
                    <country>Austria</country>
                </postal>
                <phone>+43 1 5056416 78</phone>
                <email>aaron@lo-res.org</email>
                <uri>http://www.funkfeuer.at/</uri>
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <date month="July" year="2015" />
        <area>General</area>
        <workgroup>Global Access to Internet for All</workgroup>
        <keyword>gaia, MANET</keyword>
        <abstract>
            <t>NetJSON is a data interchange format based on JavaScript Object Notation (JSON) designed to describe the basic building blocks of layer2 and layer3 networking.</t>
            <t>It defines several types of JSON objects and the manner in which they are combined to represent a network: configuration of devices, monitoring data, network topology and routing information.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                NetJSON is a format for encoding data about layer2 and layer3 networking using
                JavaScript Object Notation (JSON) <xref target="RFC7159">[RFC7159]</xref>.
            </t>
            <t>
                The format is concerned with the basic building blocks that compose a
                computer network (devices, monitoring data, routing, topology).
            </t>
            <t>
                The concepts in NetJSON are not new; they are derived from existing conventions
                in the networking field and open source implementations
                (OpenWRT, Nagios, OLSR, B.A.T.M.A.N-advanced)
                and have been streamlined to encourage interoperability and facilitate
                development of network centric web applications using JSON.
            </t>
            <section title="Requirements Language">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
                    "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
                    <xref target="RFC2119">RFC 2119</xref>.
                </t>
            </section>
            <section title="Conventions Used in This Document">
                <t>
                    The ordering of the members of any JSON object defined in this document MUST be considered irrelevant,
                    as specified by <xref target="RFC7159">RFC RFC7159</xref>.
                </t>
                <t>
                    Some examples use the combination of a JavaScript single line comment (//) followed by an ellipsis (...) as placeholder notation for
                    content deemed irrelevant by the authors.  These placeholders must of course be deleted or otherwise replaced, before attempting to
                    validate the corresponding JSON code example.
                </t>
                <t>
                    Whitespace is used in the examples inside this document to help illustrate the data structures, but is not required.
                    Unquoted whitespace is not significant in JSON.
                </t>
            </section>
            <section title="Definitions">
                <t>
                    <list>
                        <t>
                            JavaScript Object Notation (JSON), and the terms object, name, value, array, number, true,
                            false, and null are to be interpreted as defined in <xref target="RFC7159">RFC RFC7159</xref>.
                        </t>
                        <t>
                            The term "NetJSON types" refers to the five case-sensitive strings: "DeviceConfiguration", "DeviceMonitoring",
                            "NetworkRoutes", "NetworkGraph" and "NetworkCollection".
                        </t>
                    </list>
                </t>
            </section>
        </section>
        <section title="NetJSON Object">
            <t>
                NetJSON always consists of a single object. This object (referred to as the NetJSON object below) may represent the configuration
                of a device, the monitoring data of a device, routing information, network topology, or a collection of NetJSON objects.
            </t>
            <t>
                The NetJSON object MUST have a member with the name "type". The value of the member MUST be one of the NetJSON types.
            </t>
            <t>
                The NetJSON object MAY have any number of other members not explicitly defined in this specification.
            </t>
        </section>
        <section title="Motivaton">
            <t>Blabla we are motivated because...</t>
            <section title="ABNF grammar">
                <figure>
                    <preamble>Formal grammar as defined in ...
                    </preamble>
                    <artwork>
                        <![CDATA[
answer          = entries
entries         = * ( entry CR)
entry           = "{" keyvallist "}"
keyvallist      = [ member *( value-separator member ) ]
member          = qm field qm name-separator value
name-separator  = ws %x3A ws            ; a ":" colon
value           = value                 ; as defined in the JSON RFC
value-separator = ws %x2C ws            ; , comma. As defined in JSON
field           = "rrname" | "rrtype" | "rdata" | "time_first" |
                  "time_last" | "count" | "bailiwick" | "sensor_id" |
                  "zone_time_first" | "zone_time_last" | futureField
futureField     = string
CR              = %x0D
qm              = %x22                  ; " a quotation mark
ws              = *(
                    %x20 |              ; Space
                    %x09                ; Horizontal tab
                   )

                    ]]>
                    </artwork>
                </figure>
                <t>Note that blablabla is defined in
                    JSON and has the exact same specification as there. The same goes for the definition of string.
                </t>
            </section>
            <section title="Mandatory Fields">
                <t>The mandatory fields are: blablblalba </t>
                <section title="type">
                    <t>This field contains the  "NetworkRoutes" </t>
                </section>
                <section title="protocol">
                    <t>This field returns contains the PROTOCOL-NAME, </t>
                </section>
            </section>
            <section title="Optional Fields">
                <t>Implementations SHOULD support one or more fields.</t>
                <section title="metric">
                    <t>Blablabla</t>
                </section>
            </section>
            <section title="Additional Fields">
                <t>Implementations MAY support the following fields:</t>
                <section title="router_id">
                    <t>Blablabla</t>
                </section>
            </section>
        </section>
        <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
        <?rfc needLines="8" ?>
        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>This work was partically supported financially via the CONFINE EU FP7 grant. XXX insert reference </t>
        </section>
        <!-- Possibly a 'Contributors' section ... -->
        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>
        <section anchor="Privacy" title="Privacy Considerations">
            <t>... blabla</t>
        </section>
        <section anchor="Security" title="Security Considerations">
            <t>This section is mandatory and MUST define the security implications</t>
        </section>
    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <!-- References split into informative and normative -->
        <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
        <references>
            <reference anchor="RFC7159" target="https://tools.ietf.org/html/rfc7159">
                <front>
                    <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
                    <author fullname="Tim Bray"/>
                    <date year="2014"/>
                </front>
            </reference>
        </references>
        <references title="Informative References">
            &RFC2119;
        </references>
        <section anchor="app-additional" title="Examples">
            <t>The JSON output are represented on multiple lines for readability but each JSON object should on a single line.</t>
            <t>If you query a passive DNS for the rrname www.ietf.org, the passive dns common output format can be:</t>
            <figure>
                <artwork>
                    <![CDATA[
{"count": 102, "time_first": 1298412391, "rrtype": "AAAA",
"rrname": "www.ietf.org", "rdata": "2001:1890:1112:1::20",
"time_last": 1302506851}
{"count": 59, "time_first": 1384865833, "rrtype": "A",
"rrname": "www.ietf.org", "rdata": "4.31.198.44",
"time_last": 1389022219}
        ]]>
                </artwork>
            </figure>
            <t>Example format can be:</t>
            <figure>
                <artwork>
                    <![CDATA[
{"count": 109877, "time_first": 1298398002, "rrtype": "NS",
"rrname": "ietf.org", "rdata": "ns1.yyz1.afilias-nst.info",
"time_last": 1389095375}
{"count": 4, "time_first": 1298495035, "rrtype": "A",
"rrname": "ietf.org", "rdata": "64.170.98.32",
"time_last": 1298495035}
{"count": 9, "time_first": 1317037550, "rrtype": "AAAA",
"rrname": "ietf.org", "rdata": "2001:1890:123a::1:1e",
"time_last": 1330209752}
        ]]>
                </artwork>
            </figure>
            <t></t>
        </section>
    </back>
</rfc>
