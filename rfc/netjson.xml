<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.draft-bortzmeyer-dnsop-dns-privacy SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-bortzmeyer-dnsop-dns-privacy">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-kaplan-capoano-gaia-netjson-00" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <title abbrev="NetJSON">NetJSON: data interchange format for networks</title>
        <author fullname="Federico Capoano" initials="F.C."
            surname="Capoano">
            <organization>Ninux.org</organization>
            <address>
                <postal>
                    <street>Via Silvio Pellico 29</street>
                    <city>Pomezia</city>
                    <region>Rome</region>
                    <code>00071</code>
                    <country>Italy</country>
                </postal>
                <phone>+39 366 4253802</phone>
                <email>nemesis@ninux.org</email>
                <uri>http://www.ninux.org/</uri>
            </address>
        </author>
        <date month="July" year="2015" />
        <area>General</area>
        <workgroup>Global Access to Internet for All</workgroup>
        <keyword>gaia, MANET</keyword>
        <abstract>
            <t>NetJSON is a data interchange format based on JavaScript Object Notation (JSON) designed to describe the basic building blocks of layer2 and layer3 networking.</t>
            <t>It defines several types of JSON objects and the manner in which they are combined to represent a network: configuration of devices, monitoring data, network topology and routing information.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                NetJSON is a format for encoding data about layer2 and layer3 networking using
                JavaScript Object Notation (JSON) <xref target="RFC7159">[RFC7159]</xref>.
            </t>
            <t>
                The format is concerned with the basic building blocks that compose a
                computer network (devices, monitoring data, routing, topology).
            </t>
            <t>
                The concepts in NetJSON are not new; they are derived from existing conventions
                in the networking field and open source implementations
                (OpenWRT, Nagios, OLSR, Batman-adv)
                and have been streamlined to encourage interoperability and facilitate
                development of network centric web applications using JSON.
            </t>
            <section title="Motivatons">
                <t>Developing software that deals with networks is harder than it should.</t>
                <t>Developers have to take into account all the differences between vendors, operating systems,
                    routing protocols, hardware and (when working with community networks) with the different approaches of each community.</t>
                <t>Very often, each vendor develops an entire stack that works exclusively with its own hardware and software.</t>
                <t>There exist many libraries and web apps for networking, but it is very hard to make them interoperable,
                    that is, making them talk and understand one another with minimum effort.</t>
                <t>This is an attempt to invert this trend, following the successful example of the GeoJSON open standard.</t>
                <t>By defining common data structures we can allow developers to focus on their goals instead of having
                    to struggle with the differences of each vendor, firmware, routing protocol or community.</t>
            </section>
            <section title="Requirements Language">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
                    "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
                    <xref target="RFC2119">RFC 2119</xref>.
                </t>
            </section>
            <section title="Conventions Used in This Document">
                <t>
                    The ordering of the members of any JSON object defined in this document MUST be considered irrelevant,
                    as specified by <xref target="RFC7159">RFC RFC7159</xref>.
                </t>
                <t>
                    Some examples use the combination of a JavaScript single line comment (//) followed by an ellipsis (...) as placeholder notation for
                    content deemed irrelevant by the authors.  These placeholders must of course be deleted or otherwise replaced, before attempting to
                    validate the corresponding JSON code example.
                </t>
                <t>
                    Whitespace is used in the examples inside this document to help illustrate the data structures, but is not required.
                    Unquoted whitespace is not significant in JSON.
                </t>
            </section>
            <section title="Definitions">
                <t>
                    <list>
                        <t>
                            JavaScript Object Notation (JSON), and the terms object, name, value, array, number, true,
                            false, and null are to be interpreted as defined in <xref target="RFC7159">RFC RFC7159</xref>.
                        </t>
                        <t>
                            The term "NetJSON types" refers to the five case-sensitive strings: "DeviceConfiguration", "DeviceMonitoring",
                            "NetworkRoutes", "NetworkGraph" and "NetworkCollection".
                        </t>
                    </list>
                </t>
            </section>
        </section>
        <section title="NetJSON Object">
            <t>
                NetJSON always consists of a single object. This object (referred to as the NetJSON object below) may represent the configuration
                of a device, the monitoring data of a device, routing information, network topology, or a collection of NetJSON objects.
            </t>
            <t>
                The NetJSON object MUST have a member with the name "type". The value of the member MUST be one of the NetJSON types.
            </t>
            <t>
                The NetJSON object MAY have any number of other members not explicitly defined in this specification.
            </t>
        </section>
        <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
        <?rfc needLines="8" ?>
        <section anchor="Privacy" title="Privacy Considerations">
            <t>NetJSON does not impose to publish, send or collect sensitive information.</t>
            <t>NetJSON only describes how to represent data, each implementation has to decide:</t>
            <t><list><t>which parts to expose (sensitive data can be omitted)</t></list></t>
            <t><list><t>how to expose it (public, basic auth, token auth, ecc.)</t></list></t>
            <t><list><t>how to collect it</t></list></t>
            <t><list><t>which parts should be collected</t></list></t>
        </section>
        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>This work was partically supported financially via the CONFINE EU FP7 grant. XXX insert reference </t>
        </section>
    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <!-- References split into informative and normative -->
        <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
        <references>
            <reference anchor="RFC7159" target="https://tools.ietf.org/html/rfc7159">
                <front>
                    <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
                    <author fullname="Tim Bray"/>
                    <date year="2014"/>
                </front>
            </reference>
        </references>
        <references title="Informative References">
            &RFC2119;
        </references>
        <section anchor="app-additional" title="Examples">
            <t>NetworkGraph object example:</t>
            <figure>
                <artwork>
                    <![CDATA[
{
    "type": "NetworkGraph",
    "protocol": "olsr",
    "version": "0.6.6",
    "revision": "5031a799fcbe17f61d57e387bc3806de",
    "metric": "etx",
    "router_id": "172.16.40.24",
    "nodes": [
        {
            "id": "172.16.40.24",
            "label": "node-A",
            "local_addresses": [
                "10.0.0.1",
                "10.0.0.2"
            ],
            "properties": {
                "hostname": "node1.my.net"
            }
        },
        {
            "id": "172.16.40.60",
            "label": "node-B",
            "properties": {
                "hostname": "node2.my.net"
            }
        }
    ],
    "links": [
        {
            "source": "172.16.40.24",
            "target": "172.16.40.60",
            "cost": 1.000,
            "cost_text": "1020  bit/s",
            "properties": {
                "lq": 1.000,
                "nlq": 0.497
            }
        }
    ]
}
        ]]>
                </artwork>
            </figure>
        </section>
        <section anchor="Contributions" title="Contributions">
            <t>
                The NetJSON format is the product of discussion on the NetJSON
                mailing list: https://lists.funkfeuer.at/mailman/listinfo/interop-dev.
            </t>
            <t>
               Comments are solicited and should be addressed to the NetJSON mailing
               list at interop-dev@lists.funkfeuer.at or to the NetJSON issue tracker at
               https://github.com/interop-dev/netjson/issues.
           </t>
        </section>
    </back>
</rfc>
