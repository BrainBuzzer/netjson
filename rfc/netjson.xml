<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.draft-bortzmeyer-dnsop-dns-privacy SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-bortzmeyer-dnsop-dns-privacy">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-capoano-kaplan-netjson-00" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <title abbrev="NetJSON">NetJSON: data interchange format for networks</title>
        <author fullname="Federico Capoano" initials="F.C." surname="Capoano">
            <organization>Ninux.org</organization>
            <address>
                <postal>
                    <street>Via Silvio Pellico 29</street>
                    <city>Pomezia</city>
                    <region>Rome</region>
                    <code>00071</code>
                    <country>Italy</country>
                </postal>
                <phone>+39 366 4253802</phone>
                <email>nemesis@ninux.org</email>
                <uri>http://www.ninux.org/</uri>
            </address>
        </author>
        <author fullname="L. Aaron Kaplan" initials="L.A." surname="Kaplan">

          <organization>CERT.at</organization>

          <address>

            <postal>

              <street>Karlsplatz 1/2/9</street>

              <city>Vienna</city>

              <region></region>

              <code>A-1010</code>

              <country>Austria</country>

            </postal>

            <phone>+43 1 5056416 78</phone>

            <email>kaplan@cert.at</email>

            <uri>http://www.cert.at/</uri>

          </address>

    </author>
        <date month="July" year="2015" />
        <area>General</area>
        <keyword>gaia, MANET</keyword>
        <abstract>
            <t>NetJSON is a data interchange format based on JavaScript Object Notation (JSON) designed to describe the basic building blocks of layer2 and layer3 networking.</t>
            <t>It defines several types of JSON objects and the manner in which they are combined to represent a network: configuration of devices, monitoring data, network topology and routing information.</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                NetJSON is a format for describing data about layer 2 and layer 3 networks using
                JavaScript Object Notation (JSON) <xref target="RFC7159">[RFC7159]</xref>.
            </t>
            <t>
                The format is concerned with the basic building blocks that compose a
                computer network (devices, monitoring data, routing, topology).
            </t>
            <t>
                The concepts in NetJSON are not new; they are derived from existing conventions
                in the networking field, for example the community networking markup language <xref target="CNML">[CNML]</xref> or 
                open source implementations of network monitoring and routing protocols or open source firmwares
                (<xref target="OpenWRT">[OpenWRT]</xref>, <xref target="Nagios">[Nagios]</xref>, <xref target="OLSRd">[OLSRd]</xref> (<xref target="RFC3626">[RFC3626]</xref>), <xref target="RFC6126">[RFC6126]</xref>, <xref target="BMX">[BMX]</xref>, <xref target="Batman-adv">[Batman-adv]</xref>).
                These concepts have been streamlined to encourage interoperability between network centric web applications using JSON.
            </t>
            <section title="Motivatons">
                <t>Developing software that deals with networks is harder than it should.</t>
                <t>Developers have to take into account all the differences between vendors, operating systems,
                    routing protocols, hardware and (when working with community networks) with the different approaches of each community.</t>
                <t>Very often, each vendor develops an entire stack that works exclusively with its own hardware and software.</t>
                <t>There exist many libraries and web apps for networking, but it is very hard to make them interoperable,
                    that is, making them talk and understand one another with minimum effort.</t>
                <t>This is an attempt to invert this trend, following the successful example of the GeoJSON open standard.</t>
                <t>By defining common data structures we can allow developers to focus on their goals instead of having
                    to struggle with the differences of each vendor, firmware, routing protocol or community.</t>
            </section>
            <section title="Requirements Language">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
                    "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
                    <xref target="RFC2119">RFC 2119</xref>.
                </t>
            </section>
            <section title="Conventions Used in This Document">
                <t>
                    The ordering of the members of any JSON object defined in this document MUST be considered irrelevant,
                    as specified by <xref target="RFC7159">RFC RFC7159</xref>.
                </t>
                <t>
                    Some examples use the combination of a JavaScript single line comment (//) followed by an ellipsis (...) as placeholder notation for
                    content deemed irrelevant by the authors.  These placeholders must of course be deleted or otherwise replaced, before attempting to
                    validate the corresponding JSON code example.
                </t>
                <t>
                    Whitespace is used in the examples inside this document to help illustrate the data structures, but is not required.
                    Unquoted whitespace is not significant in JSON.
                </t>
            </section>
            <section title="Definitions">
                <t>
                    <list>
                        <t>
                            JavaScript Object Notation (JSON), and the terms "object", "member", "name", "value", "array", "number", "true",
                            "false", and "null" are to be interpreted as defined in <xref target="RFC7159">RFC RFC7159</xref>.
                        </t>
                        <t>
                            The term "NetJSON type(s)" (sometimes abbreviated to "type(s)") refers to (one of) the five case-sensitive strings: "DeviceConfiguration", "DeviceMonitoring",
                            "NetworkRoutes", "NetworkGraph" and "NetworkCollection".
                        </t>
                    </list>
                </t>
            </section>
        </section>
        <section title="NetJSON Object">
            <t>
                NetJSON always consists of a single object, referred to as the "NetJSON object" below.
            </t>
            <t>
                The NetJSON object MUST have a member with the name "type". The value of the member MUST be one of the NetJSON types.
            </t>
            <t>
                The NetJSON object MAY have any number of other members not explicitly defined in this specification, referred as "custom members" below.
                Before adding any custom member, read the registry section [LINK HERE] to see existing custom members and
                find out how to officially submit new custom members.
            </t>
        <section title="NetJSON types">
            <t>
                NetJSON defines the following types:
            </t>
            <t>
                    <list>
                        <t>NetworkRoutes</t>
                        <t>NetworkGraph</t>
                        <t>DeviceConfiguration</t>
                        <t>DeviceMonitoring</t>
                        <t>NetworkCollection</t>
                    </list>
                </t>
        </section>
        
        <section title="NetworkRoutes">
            <t>
                Definition: a list of routes of a dynamic routing protocol or statically configured on the device.
            </t>
            <t>
                Goals: show internal information of a routing protocol for monitoring and debugging purposes.
            </t>
            <t>A Network Routes object must have a member with the name type and value NetworkRoutes.</t>
            <t>It must define the following members:</t>
            <t>
                <list>
                        <t>protocol: string indicating the name of the routing protocol, may be "static" when representing static routes</t>
                        <t>version: string indicating the version of the routing protocol, may be null when representing static routes</t>
                        <t>metric: string which indicates the name of main routing metric used by the routing protocol to determine the best routes when sending packets, may be null when representing static routes</t>
                        <t>routes: array of route objects</t>
                </list>
            </t>
            <t>It may also define the following optional members:</t>
            <t>
                <list>
                    <t>revision: string indicating the revision from which the routing protocol binary was built (eg: git hash, svn revision)</t>
                    <t>topology_id: arbitrary string that identifies the topology</t>
                </list>
            </t>
        </section>
        <section title="NetworkGraph">
            <t>
                Definition: a list of nodes and links known by a node.
            </t>
            <t>
                Goals: visualization of network topology, collect network topology from distance vector protocols, monitoring.
            </t>
        </section>
        <section title="DeviceConfiguration">
            <t>
                Definition: configuration and properties of a network device.
            </t>
            <t>
                Goals: configuration storage and management, import and export
                configurations between different monitoring tools or network controllers.
            </t>
            <section title="Mandatory fields">

    <t>A Network Device Configuration object MUST have a member with the name "type" and value "DeviceConfiguration".</t>

    </section>

    <section title="Optional fields">

    <section title="Overview">

    <t>The object MAY be composed of the following OPTIONAL members, all of which are objects (or arrays of objects) and again contain (possibly OPTIONAL) members. 

    For a full formal specification in <xref target="JSON-Schema">JSON-Schema</xref> format, please see XXX insert reference XXX</t>

    <t>

    <list>

    <t><spanx style="strong">general</spanx>: an object describing general information such as hostname, technical maintainer, etc. of the network device.</t>

    <t><spanx style="strong">hardware</spanx>: an object describing hardware characteristics of the network device.</t>

    <t><spanx style="strong">operating_system</spanx>: an object listing name, version, kernel version and revision of the operating system.</t>

    <t><spanx style="strong">resources</spanx>: object listing computing resources that the network device has.</t>

    <t><spanx style="strong">interfaces</spanx>: an array of objects describing logical networking interfaces of the network device.</t>

    <t><spanx style="strong">physical_devices</spanx>: an array of objects describing the physical networking interfaces of the network device.</t>

    <t><spanx style="strong">routes</spanx>: an array of objects describing the current routing table of the network device. Note that these values can vary a lot over time and MUST NOT be considered static information.</t>

    <t><spanx style="strong">dns_servers</spanx>: an array of strings denoting DNS servers of the networking device.</t>

    <t><spanx style="strong">dns_search</spanx>: an array of  strings denoting DNS search paths .</t>

    </list>

    </t>

    </section>

    <section title="Details">

    <texttable align="left">

    <ttcol>parent</ttcol><ttcol>child</ttcol><ttcol>format</ttcol><ttcol>description</ttcol>

    <c>general</c><c>hostname</c><c> string</c><c>Hostname of the network device</c>

    <c>general</c><c>maintainer</c><c>string</c><c>Email address of the maintainer of the network device</c>

    <c>general</c><c>description</c><c>string</c><c>Free-form textual description of the network device</c>

    <c>hardware</c><c>manufacturer</c><c>string</c><c>Name of the manufacturer of the device</c>

    <c>hardware</c><c>model</c><c>string</c><c>Name of the model</c>

    <c>hardware</c><c>revision</c><c>number</c><c></c>

    <c>hardware</c><c>cpu</c><c>string</c><c>CPU specification</c>

    <c>operating_system</c><c>name</c><c>string</c><c>Name of the operating system or firmware</c>

    <c>operating_system</c><c>kernel</c><c>string</c><c>Kernel version</c>

    <c>operating_system</c><c>version</c><c>string</c><c>Version name or version number of the operating system</c>

    <c>operating_system</c><c>revision</c><c>string</c><c>revision number or revision tag</c>

    <c>operating_system</c><c>description</c><c>string</c><c>Free-form textual description</c>

    <c>resources</c><c>memory</c><c>object</c><c>Object containing "total" - a number of total memory (unit: bytes)</c>

    <c>resources</c><c>swap</c><c>object</c><c>Object containing "total" - a number of total swap memory (unit: bytes)</c>

    <c>resources</c><c>cpu</c><c>object</c><c>Object containing "frequency" - a number of specifying the frequency (unit: Hz)</c>

    <c>resources</c><c>flash</c><c>object</c><c>Object containing "total" - a number of total flash memory (unit: bytes)</c>

    <c>resources</c><c>storage</c><c>object</c><c>Object containing "total" - a number of total external storage memory (unit: bytes)</c>

    <c>physical_devices</c><c>name</c><c>string</c><c>Name of the physical device</c>

    <c>physical_devices</c><c>channel</c><c>number</c><c>Channel number</c>

    <c>physical_devices</c><c>channel_width</c><c>number</c><c>Channel width (unit: Hz)</c>

    <c>physical_devices</c><c>tx_power</c><c>number</c><c>Transmission power (unit: dBm)</c>

    <c>interfaces</c><c>type</c><c>string</c><c>Possible values: "wireless" , "ethernet", "bridge" or "virtual"</c>

    <c>interfaces</c><c>bridge-members</c><c>array</c><c>An array listing the interface names contained in the network bridge interface</c>

    <c>interfaces</c><c>name</c><c>string</c><c>Name of the logical interface</c>

    <c>interfaces</c><c>mac</c><c>string</c><c>Mac address</c>

    <c>interfaces</c><c>mtu</c><c>number</c><c>Maximum Transmission Unit</c>

    <c>interfaces</c><c>txqueuelen</c><c>number</c><c>TX queue length</c>

    <c>interfaces</c><c>carrier</c><c>boolean</c><c>Is the interface sensing any carrier?</c>

    <c>interfaces</c><c>autostart</c><c>boolean</c><c>Should the interface be brought up after power on?</c>

    <c>interfaces</c><c>wireless</c><c>object</c><c>Object. Only valid in this context if "type" = "wireless". This object links the logical wireless interace to the physical wireless interface and also specifies various physical parameters. For a detailed list of all sub-members of this object, please refer to XXX insert reference JSON-Schema XXX.</c>

    <c>interfaces</c><c>addresses</c><c>array of objects</c><c>An array of objects with members listing the address, netmask, family ("ipv4", "ipv6") and protocol ("static", "dynamic") of the configured IP address of the logical interface. Note that a logical interface MAY have multiple IP addresses assigned and therefore multiple array members are possible in this field</c>

    <c>routes</c><c>destination</c><c>string</c><c>"routes" contains an array of objects, each listing "destination" and "next" (hop) IP address. In essence, it is a routing table</c>

    <c>routes</c><c>next</c><c>string</c><c>"routes" contains an array of objects, each listing "destination" and "next" (hop) IP address. In essence, it is a routing table</c>

    </texttable>

    </section>

    <section title="Examples">

    <t>See XXX internal reference XXX</t>

    </section>

    </section>

        </section>
        <section title="DeviceMonitoring">
            <t>
                Definition: information that indicates the behaviour of a device that changes over time.
            </t>
            <t>
                Goals: ouput, collect, parse and visualize monitoring data of a network device.
            </t>
        </section>
        <section title="NetworkCollection">
            <t>
                Definition: collection of NetJSON objects.
            </t>
            <t>
                Goals: allow to list various netjson objects into a coherent group, eg:
            </t>
            <t>
                <list>

                  <t>list graphs of different routing protocols running on the same device</t>

                  <t>list all the routes of a multi-topology capable routing protocol</t>

                  <t>list devices of a network</t>

                </list>
            </t>
        </section>
        
        </section>
        <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
        <?rfc needLines="8" ?>
        <section anchor="Privacy" title="Privacy Considerations">
            <t>NetJSON does not impose to publish, send or collect sensitive information.</t>
            <t>NetJSON only describes how to represent data, each implementation has to decide:</t>
            <t>
            <list>
                <t>which parts to expose (sensitive data can be omitted)</t>
                <t>how to expose it (public, basic auth, token auth, ecc.)</t>
                <t>how to collect it</t>
                <t>which parts should be collected</t>
            </list>
            </t>
        </section>
        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>This work was partially supported financially via the <xref target="CONFINE">CONFINE EU FP7</xref> grant </t>
        </section>
    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <!-- References split into informative and normative -->
        <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
        <references>
            <reference anchor="RFC7159" target="https://tools.ietf.org/html/rfc7159">
                <front>
                    <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
                    <author fullname="Tim Bray" initials="T." surname="Bray"/>
                    <date year="2014"/>
                </front>
            </reference>

    <reference anchor="JSON-Schema" target="https://datatracker.ietf.org/doc/draft-zyp-json-schema/">

                <front>
                    <title>JSON Schema: core definitions and terminology</title>
                    <author fullname="Francis Galiegue" initials="F." surname="Galiegue"/>
                    <date year="2013"/>
                </front>
            </reference>
            <reference anchor="CNML" target="http://www.cnml.info/">
                <front>
                    <title>The Community Networking Markup Language (CNML)</title>
                    <author fullname="Alexander Klosch"  initials="A." surname="Klosch"/>
                    <author fullname="Mario Behling"  initials="M." surname="Behling"/>
                    <date year="2007"/>
                </front>
            </reference>
            <reference anchor="RFC3626" target="https://tools.ietf.org/html/rfc3626">
                <front>
                    <title>Optimized Link State Routing Protocol (OLSR)</title>
                    <author fullname="T. Clausen" initials="T." surname="Clausen"/>
                    <author fullname="P. Jacquet" initials="P." surname="Jacquet"/>
                    <date year="2003"/>
                </front>
            </reference>    
            <reference anchor="OLSRd" target="http://www.olsr.org">
                <front>
                    <title>The Optimised Link State Routing Protocol (OLSR), olsrd open source implementation</title>
                    <author fullname="Henning Rogge" initials="H." surname="Rogge"/>
                    <author fullname="Andreas Tonnesen" initials="A." surname="Tonnesen"/>
                    <author fullname="Aaron Kaplan" initials="L.A." surname="Kaplan"/>
                    <author fullname="Bernd Petrovisch" initials="B." surname="Petrovitsch"/>
                    <author fullname="Thomas Lopatic" initials="T." surname="Lopatic"/>
                    <author fullname="Ferry Huberts" initials="F." surname="Huberts"/>
                    <date year="2004"/>
                </front>
            </reference>
            <reference anchor="BMX" target="http://bmx6.net/projects/bmx6">
                <front>
                    <title>BMX6 Mesh networking protocol</title>
                    <author fullname="Axel Neumann" initials="A." surname="Neumann"/>
                    <date year="2007"/>
            <reference anchor="RFC7181" target="https://tools.ietf.org/html/rfc7181">
                <front>
                    <title>The Optimized Link State Routing Protocol Version 2</title>
                    <author fullname="T. Clausen" initials="T.C." surname="Clausen"/>
                    <author fullname="C. Dearlove" initials="C.D." surname="Dearlove"/>
                    <author fullname="P. Jacquet" initials="P.J." surname="Jacquet"/>
                    <author fullname="U. Herberg" initials="U.H." surname="Herberg"/>
                    <date year="2003"/>
                </front>
            </reference>
                </front>
            </reference>
            <reference anchor="RFC6126" target="http://tools.ietf.org/html/rfc6126">
                <front>
                    <title>The Babel Routing Protocol</title>
                    <author fullname="Julius Chroboczek" initials="J." surname="Chroboczek"/>
                    <date year="2009"/>
                </front>
            </reference>
            <reference anchor="Batman-adv" target="http://www.open-mesh.org/projects/open-mesh/wiki">
                <front>
                    <title>Batman-adv routing protocol</title>

                    <author>

                        <organization>The B.A.T.M.A.N.  team</organization>

    </author>

                    <date year="2009"/>
                </front>
            </reference>
           <reference anchor="OpenWRT" target="http://www.openwrt.org">
                <front>
                    <title>OpenWRT</title>

    <author>

                        <organization>The OpenWRT team</organization>

    </author>

                    <date year="2004"/>
                </front>
            </reference>
           <reference anchor="Nagios" target="http://www.nagios.org">
                <front>
                    <title>Nagios network monitoring</title>
                    <author fullname="Ethan Galstad" initials="E." surname="Galstad"/>
                    <date year="1999"/>
                </front>
            </reference>
            <reference anchor="CONFINE" target="http://www.confine-project.eu">
                <front>
                    <title>The CONFINE EU project</title>
                    <author>

                        <organization>The CONFINE project team</organization>

    </author>

                    <date year="2011"/>
                </front>
            </reference>
        </references>
        <references title="Informative References">
            &RFC2119;
        </references>
        <section anchor="app-additional" title="Examples">
            <t>NetworkGraph object example:</t>
            <figure>
                <artwork>
                    <![CDATA[
{
    "type": "NetworkGraph",
    "protocol": "olsr",
    "version": "0.6.6",
    "revision": "5031a799fcbe17f61d57e387bc3806de",
    "metric": "etx",
    "router_id": "172.16.40.24",
    "nodes": [
        {
            "id": "172.16.40.24",
            "label": "node-A",
            "local_addresses": [
                "10.0.0.1",
                "10.0.0.2"
            ],
            "properties": {
                "hostname": "node1.my.net"
            }
        },
        {
            "id": "172.16.40.60",
            "label": "node-B",
            "properties": {
                "hostname": "node2.my.net"
            }
        }
    ],
    "links": [
        {
            "source": "172.16.40.24",
            "target": "172.16.40.60",
            "cost": 1.000,
            "cost_text": "1020  bit/s",
            "properties": {
                "lq": 1.000,
                "nlq": 0.497
            }
        }
    ]
}
        ]]>
                </artwork>
            </figure>
        </section>
        <section anchor="Contributions" title="Contributions">
            <t>
                The NetJSON format is the product of discussion on the NetJSON
                mailing list: https://lists.funkfeuer.at/mailman/listinfo/interop-dev.
            </t>
            <t>
               Comments are solicited and should be addressed to the NetJSON mailing
               list at interop-dev@lists.funkfeuer.at or to the NetJSON issue tracker at
               https://github.com/interop-dev/netjson/issues.
           </t>
        </section>
    </back>
</rfc>


